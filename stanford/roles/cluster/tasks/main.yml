---
- name: Lookup/create subnet
  ec2_vpc_subnet:
    state: present
    vpc_id: "{{ DEPLOYMENT_VPC_ID }}"
    cidr: "{{ CLUSTER_SUBNET_CIDR }}"
    az: "{{ CLUSTER_SUBNET_AZ }}"
    resource_tags: "{{ CLUSTER_SUBNET_TAGS }}"
  register: cluster_subnet
- name:  Set Public Subnet ID
  set_fact:
    CLUSTER_SUBNET_ID: "{{ cluster_subnet.subnet.id }}"
- debug: var=cluster_subnet
- name: Create public route table
  ec2_vpc_route_table:
    vpc_id: "{{ DEPLOYMENT_VPC_ID }}"
    region: "{{ DEPLOYMENT_REGION }}"
    purge_subnets: false
    subnets:
      - "{{ CLUSTER_SUBNET_ID }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ deployment_gateway.gateway_id }}"
      - dest: "{{ DEPLOYMENT_CIDR }}"
        gateway_id: local
    tags:
      Deployment: "{{ COMMON_DEPLOYMENT }}"
      Network: Public2
      Name: "{{ COMMON_DEPLOYMENT }}-route-public2"
  register: deployment_route_public
  when: CLUSTER_NETWORK == 'public'
- debug: var=deployment_route_public
  when: CLUSTER_NETWORK == 'public'
- name: Lookup/create security group
  ec2_group:
    # Tags added in Ansible 2.4
    name: "{{ CLUSTER_SECURITY_GROUP }}"
    description: "{{ CLUSTER_SECURITY_GROUP_DESCRIPTION }}"
    vpc_id: "{{ DEPLOYMENT_VPC_ID }}"
    region: "{{ CLUSTER_REGION }}"
    rules: "{{ CLUSTER_SECURITY_GROUP_RULES_INGRESS }}"
  register: cluster_security_group
- debug: var=cluster_security_group
- name: Lookup/create security groups (ELB)
  ec2_group:
    # Tags added in Ansible 2.4
    name: "{{ COMMON_DEPLOYMENT }}-group-{{ item.key }}"
    description: "Secure {{ COMMON_DEPLOYMENT }}-{{ item.key }}"
    vpc_id: "{{ DEPLOYMENT_VPC_ID }}"
    region: "{{ CLUSTER_REGION }}"
    rules: "{{ item.value }}"
  register: cluster_security_group_elb
  with_dict: "{{ CLUSTER_ELB_SECURITY_GROUPS }}"
- debug: var=cluster_security_group_elb
  when: cluster_security_group_elb is defined
- name: Lookup/create load balancer
  ec2_elb_lb:
    state: present
    scheme: "{{ item.scheme }}"
    name: "{{ item.name }}"
    subnets: "{{ item.subnets }}"
    listeners: "{{ item.listeners }}"
    health_check: "{{ item.health_check }}"
    region: "{{ CLUSTER_REGION }}"
    tags:
      Cluster: "{{ CLUSTER_NAME }}"
      Deployment: "{{ COMMON_DEPLOYMENT }}"
      Name: "{{ COMMON_DEPLOYMENT }}-elb-{{ CLUSTER_NAME }}"
    # TODO: change to names
    security_group_names: "{{ item.groups }}"
  with_items: "{{ CLUSTER_ELBS }}"
  register: cluster_elb
  ignore_errors: yes
- debug: var=cluster_elb
- name: Create new instance
  ec2:
    key_name: "{{ CLUSTER_KEY }}"
    instance_type: "{{ CLUSTER_INSTANCE_TYPE }}"
    image: "{{ CLUSTER_AMI }}"
    wait: yes
    count: 1
    vpc_subnet_id: "{{ cluster_subnet.subnet.id }}"
    assign_public_ip: "{{ CLUSTER_ASSIGN_PUBLIC_IP }}"
    instance_tags:
      Birthday: "{{ lookup('pipe', \"date -u +'%Y-%m-%d %H:%M:%S'\") }}"
      Cluster: "{{ CLUSTER_NAME }}"
      Deployment: "{{ COMMON_DEPLOYMENT }}"
      Name: "{{ COMMON_DEPLOYMENT }}-box-{{ CLUSTER_NAME }}-{{ CLUSTER_NUMBER }}"
      Number: "{{ CLUSTER_NUMBER }}"
      todo: deploy
    groups: "{{ CLUSTER_SECURITY_GROUPS }}"
    region: "{{ CLUSTER_REGION }}"
    volumes:
      - device_name: /dev/sda1
        volume_size: "{{ CLUSTER_EBS_SIZE }}"
        delete_on_termination: true
  register: ec2
- debug:
    var: item
  with_items: "{{ ec2.instances | default([])}}"
- name: Add new instance to host group
  add_host:
    name: "{{ item.public_ip }}"
    groups:
      - cluster_group_launched
      - tag_todo_deploy
      - "tag_Deployment_{{ COMMON_DEPLOYMENT }}"
      - "tag_Cluster_{{ CLUSTER_NAME }}"
      - "tag_Number_{{ CLUSTER_NUMBER }}"
  with_items: "{{ ec2.instances | default([])}}"
  when:
    - item.public_ip
- name: Add new instance to host group
  add_host:
    name: "{{ item.private_ip }}"
    groups:
      - cluster_group_launched
      - tag_todo_deploy
      - "tag_Deployment_{{ COMMON_DEPLOYMENT }}"
      - "tag_Cluster_{{ CLUSTER_NAME }}"
      - "tag_Number_{{ CLUSTER_NUMBER }}"
  with_items: "{{ ec2.instances | default([])}}"
  when:
    - not item.public_ip
- name: Wait for SSH to come up
  wait_for:
    host: "{{ item.public_ip | default(item.private_ip) }}"
    port: 22
    delay: 10
    timeout: 300
  with_items: "{{ ec2.instances | default([])}}"
